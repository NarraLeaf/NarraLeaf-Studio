#!/usr/bin/env node

/*
 * NarraLeaf Studio â€“ Electron packaging helper
 * 1. Builds renderer apps (production)
 * 2. Builds main process (production)
 * 3. Invokes electron-builder to package the app
 *
 * Usage:
 *   node project/app/pack-electron.js --win --x64
 * Any extra args are forwarded to electron-builder.
 */

const path = require('path');
const { spawn } = require('child_process');

function run(cmd, args = [], opts = {}) {
    return new Promise((resolve, reject) => {
        const p = spawn(cmd, args, { stdio: 'inherit', shell: process.platform === 'win32', ...opts });
        p.on('close', (code) => {
            if (code === 0) resolve();
            else reject(new Error(`${cmd} exited with code ${code}`));
        });
    });
}

(async () => {
    const rootDir = path.resolve(__dirname, '../..');
    process.chdir(rootDir);

    try {
        console.log('[pack] Building renderer apps (production)...');
        await run('node', ['project/build/build-apps.js']);

        console.log('[pack] Building main process (production)...');
        await run('node', ['project/build/build-main.js']);

        console.log('[pack] Packaging with electron-builder...');
        const extraArgs = process.argv.slice(2);
        // Force output dir to build/ unless user overrides via CLI
        const hasOutputArg = extraArgs.some((arg) => arg.includes('directories.output'));
        const builderArgs = [
            'electron-builder',
            ...(hasOutputArg ? [] : ['--config.directories.output=build']),
            ...extraArgs,
        ];
        await run('npx', builderArgs);

        console.log('[pack] Done. Artifacts are in the dist/ directory generated by electron-builder.');
    } catch (err) {
        console.error('[pack] Failed:', err);
        process.exit(1);
    }
})();
